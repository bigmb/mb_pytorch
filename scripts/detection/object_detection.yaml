data:
  from_datasets: 'CIFAR10'
  from_file: True  ##if False, then from_datasets is used
  work_dir: /home/malav/Desktop/mb_packages/mb_pytorch/data/
  file: /home/malav/Desktop/mb_packages/mb_pytorch/data/csv/file_data.csv
  use_img_dir: True
  img_dir: /home/malav/Desktop/mb_packages/mb_pytorch/data/images1/
  thresholding_pd: 0

model:
  model_type : 'detection'
  model: 'faster_rcnn'
  use_pretrained: True  
  use_own_model: False
  model_path: '/home/malav/Desktop/mb_packages/mb_pytorch/models/...' ## if use_own_model is True
  model_layer : 'avgpool' # generally used for generating embeddings

  load_model: False
  use_torchvision_models: True
  model_name: 'faster_rcnn' #if name exists in models, then it will be used. Also,if its in torchvision.models, then it will be used.
  model_version: '50'  ##if model_name is in torchvision.models, then this is the version of the model
  model_optimizer: 'adam' #adam, sgd, rmsprop,none
  model_loss: 'cross_entropy' #cross_entropy, mse,none
  model_pretrained: False
  model_num_classes: 5
  model_initialization: None

  model_parameters:
    adam: 
      {lr: 0.001, betas: [0.9, 0.999], eps: 1e-08, weight_decay: 0, amsgrad: False}
    sgd:
      {lr: 0.01, momentum: 0.9, dampening: 0, weight_decay: 0, nesterov: False}
    rmsprop:
      {lr: 0.01, alpha: 0.99, eps: 1e-08, weight_decay: 0, momentum: 0, centered: False}
    cross_entropy:
      {weight: None, size_average: None, ignore_index: -100, reduce: None, reduction: 'mean'}
    mse:
      {size_average: None, reduce: None, reduction: 'mean'}



train_params:
  batch_size: 4
  num_workers: 4
  pin_memory: True
  shuffle: False
  seed: 42

test_params:
  null: null

transformation:
  transform : True
  resize:
    val : False
    args:
      size: [256, 256]
  random_crop:
    val : False
    args:
      size: [224, 224]
  random_horizontal_flip:
    val : True
    args:
      p: 0.5
  random_vertical_flip:
    val : False
    args:
       p: 0.5
  random_rotation:
    val : True
    args:
      degrees: 90
  random_grayscale:
    val : False
    args:
      p: 0.1
  random_color_jitter:
    val : True
    args:
      brightness: 0.4
      contrast: 0.4
      saturation: 0.4
      hue: 0.1
  normalize:
    val : False
    args:
      mean: [0.485, 0.456, 0.406]
      std: [0.229, 0.224, 0.225]
  to_tensor:
    val : True


 