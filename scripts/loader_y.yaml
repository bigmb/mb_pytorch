data:
  file:
    {root : '/home/malav/Desktop/mb_packages/mb_pytorch/data/fruit_dataset/fruit_dataset_final_test.csv', 
    ## path to the csv file ##/home/malav/Desktop ## /home/winnow/mb_packages/mb_pytorch ## just add csv file to the folder. result saved here too.
    verify_image_path: True,  ## if True, then image path is verified
    verify_image : False} ## if Ture, verifying images using mb.

##csv format ('image_id','image_path','image_type','label','bbox') 

model:
  model_type : 'detection'  ## detection, segmentation, classification
  model: 'faster_rcnn'
  use_pretrained: True  
  use_own_model: False
  #model_path: '/home/winnow/Desktop/mb_packages/mb_pytorch/models/...' ## if use_own_model is True   
  model_path : '/home/malav/Desktop/mb_packages/mb_pytorch/models/...'
  model_layer : 'avgpool' # generally used for generating embeddings

  device: 'cpu'  ## cpu, cuda
  load_model: False
  use_torchvision_models: True
  model_name: 'fasterrcnn_resnet50_fpn' #if name exists in models, then it will be used. Also,if its in torchvision.models, then it will be used.
  model_version: '50'  ##if model_name is in torchvision.models, then this is the version of the model
  model_backbone: 'resnet'  ##if model_name is in torchvision.models, then this is the backbone of the model
  model_optimizer: 'Adam' #adam, sgd, rmsprop,none
  model_loss: 'cross_entropy' #cross_entropy, mse,none
  model_scheduler: 'StepLR' #StepLR, ExponentialLR,none
  model_pretrained: True
  model_epochs: 3
  model_num_classes: 41    ## if multiple classes, then labels should be in the form of list
  model_initialization: None
  model_meta_data:  {model_bbox_threshold: 0.8}

  model_train_parameters:
    Adam: 
      {lr: 0.001, betas: [0.9, 0.999], eps: !!float 1e-08, weight_decay: 0, amsgrad: False}
    SGD:
      {lr: 0.01, momentum: 0.9, dampening: 0, weight_decay: 0, nesterov: False}
    RMSprop:
      {lr: 0.01, alpha: 0.99, eps: !!float 1e-08, weight_decay: 0, momentum: 0, centered: False}
    cross_entropy:
      {weight: None, size_average: None, ignore_index: -100, reduce: None, reduction: 'mean'}
    mse_loss:
      {size_average: None, reduce: None, reduction: 'mean'}
    StepLR:
      {step_size: 3, gamma: 0.2}
    ExponentialLR:
      {gamma: 0.9}

train_params:
  batch_size: 8
  num_workers: 4
  pin_memory: True
  shuffle: False
  seed: 42

val_params:
  batch_size: 8
  num_workers: 4
  pin_memory: True
  shuffle: False
  seed: 42  

transformation:
  transform : True ## if True, then the following transformations are used
  resize:
    val : True
    args:
      size: [600, 800]
  random_crop:
    val : False
    args:
      size: [224, 224]
  random_horizontal_flip:
    val : False
    args:
      p: 0.5
  random_vertical_flip:
    val : False
    args:
       p: 0.5
  random_rotation:
    val : False
    args:
      degrees: 90
  random_grayscale:
    val : False
    args:
      p: 0.1
  random_color_jitter:
    val : False
    args:
      brightness: 0.4
      contrast: 0.4
      saturation: 0.4
      hue: 0.1
  normalize:
    val : False
    args:
      mean: [0.485, 0.456, 0.406]
      std: [0.229, 0.224, 0.225]
  to_tensor:
    val : True


 